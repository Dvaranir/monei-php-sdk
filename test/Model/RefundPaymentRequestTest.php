<?php

/**
 * RefundPaymentRequestTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;
use Monei\Model\RefundPaymentRequest;
use Monei\Model\PaymentRefundReason;

/**
 * RefundPaymentRequestTest Class Doc Comment
 *
 * @category    Class
 * @description RefundPaymentRequest
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RefundPaymentRequestTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test "RefundPaymentRequest"
     */
    public function testRefundPaymentRequest()
    {
        $request = new RefundPaymentRequest();
        $this->assertInstanceOf(RefundPaymentRequest::class, $request);

        // Test with constructor parameters
        $data = [
            'amount' => 1000,
            'refund_reason' => 'requested_by_customer'
        ];

        $request = new RefundPaymentRequest($data);
        $this->assertEquals($data['amount'], $request->getAmount());
        $this->assertEquals($data['refund_reason'], $request->getRefundReason());
    }

    /**
     * Test attribute "amount"
     */
    public function testPropertyAmount()
    {
        $request = new RefundPaymentRequest();
        $expected = 500;
        $request->setAmount($expected);
        $this->assertEquals($expected, $request->getAmount());
    }

    /**
     * Test attribute "refund_reason"
     */
    public function testPropertyRefundReason()
    {
        $request = new RefundPaymentRequest();

        // Test with null value
        $this->assertNull($request->getRefundReason());

        // Test with valid enum values
        foreach (PaymentRefundReason::getAllowableEnumValues() as $reason) {
            $request->setRefundReason($reason);
            $this->assertEquals($reason, $request->getRefundReason());
        }

        // Test specifically with all valid values
        $request->setRefundReason('duplicated');
        $this->assertEquals('duplicated', $request->getRefundReason());

        $request->setRefundReason('fraudulent');
        $this->assertEquals('fraudulent', $request->getRefundReason());

        $request->setRefundReason('requested_by_customer');
        $this->assertEquals('requested_by_customer', $request->getRefundReason());

        // Note: The RefundPaymentRequest model does not validate enum values in setRefundReason
        // So we don't test invalid values here
    }
}
