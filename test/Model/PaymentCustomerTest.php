<?php

/**
 * PaymentCustomerTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;
use Monei\Model\PaymentCustomer;

/**
 * PaymentCustomerTest Class Doc Comment
 *
 * @category    Class
 * @description PaymentCustomer
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PaymentCustomerTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test "PaymentCustomer"
     */
    public function testPaymentCustomer()
    {
        $customer = new PaymentCustomer();
        $this->assertInstanceOf(PaymentCustomer::class, $customer);

        // Test with constructor parameters
        $data = [
            'email' => 'customer@example.com',
            'name' => 'John Doe',
            'phone' => '+1234567890'
        ];

        $customer = new PaymentCustomer($data);
        $this->assertEquals($data['email'], $customer->getEmail());
        $this->assertEquals($data['name'], $customer->getName());
        $this->assertEquals($data['phone'], $customer->getPhone());
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        $customer = new PaymentCustomer();
        $expected = 'test@example.com';
        $customer->setEmail($expected);
        $this->assertEquals($expected, $customer->getEmail());
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        $customer = new PaymentCustomer();
        $expected = 'Jane Smith';
        $customer->setName($expected);
        $this->assertEquals($expected, $customer->getName());
    }

    /**
     * Test attribute "phone"
     */
    public function testPropertyPhone()
    {
        $customer = new PaymentCustomer();
        $expected = '+34612345678';
        $customer->setPhone($expected);
        $this->assertEquals($expected, $customer->getPhone());
    }
}
