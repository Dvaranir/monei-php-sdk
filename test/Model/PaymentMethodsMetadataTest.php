<?php

/**
 * PaymentMethodsMetadataTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PaymentMethodsMetadataTest Class Doc Comment
 *
 * @category    Class
 * @description PaymentMethodsMetadata
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PaymentMethodsMetadataTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PaymentMethodsMetadata"
     */
    public function testPaymentMethodsMetadata()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadata::class, $model);
    }

    /**
     * Test attribute "alipay"
     */
    public function testPropertyAlipay()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getAlipay());

        // Test with PaymentMethodsMetadataAlipay object
        $expected = new \Monei\Model\PaymentMethodsMetadataAlipay();
        $expected->setCountries(['US']);

        $model->setAlipay($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataAlipay::class, $model->getAlipay());
        $this->assertEquals(['US'], $model->getAlipay()->getCountries());
    }

    /**
     * Test attribute "bancontact"
     */
    public function testPropertyBancontact()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getBancontact());

        // Test with PaymentMethodsMetadataBancontact object
        $expected = new \Monei\Model\PaymentMethodsMetadataBancontact();
        $expected->setCountries('test_value');

        $model->setBancontact($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataBancontact::class, $model->getBancontact());
        $this->assertEquals('test_value', $model->getBancontact()->getCountries());
    }

    /**
     * Test attribute "bizum"
     */
    public function testPropertyBizum()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getBizum());

        // Test with PaymentMethodsMetadataBizum object
        $expected = new \Monei\Model\PaymentMethodsMetadataBizum();
        $expected->setCountries('test_value');

        $model->setBizum($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataBizum::class, $model->getBizum());
        $this->assertEquals('test_value', $model->getBizum()->getCountries());
    }

    /**
     * Test attribute "blik"
     */
    public function testPropertyBlik()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getBlik());

        // Test with PaymentMethodsMetadataBlik object
        $expected = new \Monei\Model\PaymentMethodsMetadataBlik();
        $expected->setCountries('test_value');

        $model->setBlik($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataBlik::class, $model->getBlik());
        $this->assertEquals('test_value', $model->getBlik()->getCountries());
    }

    /**
     * Test attribute "card"
     */
    public function testPropertyCard()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getCard());

        // Test with PaymentMethodsMetadataCard object
        $expected = new \Monei\Model\PaymentMethodsMetadataCard();
        $expected->setBrands(['visa', 'mastercard']);

        $model->setCard($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataCard::class, $model->getCard());
        $this->assertEquals(['visa', 'mastercard'], $model->getCard()->getBrands());
    }

    /**
     * Test attribute "eps"
     */
    public function testPropertyEps()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getEps());

        // Test with PaymentMethodsMetadataEps object
        $expected = new \Monei\Model\PaymentMethodsMetadataEps();
        $expected->setCountries('test_value');

        $model->setEps($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataEps::class, $model->getEps());
        $this->assertEquals('test_value', $model->getEps()->getCountries());
    }

    /**
     * Test attribute "giropay"
     */
    public function testPropertyGiropay()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getGiropay());

        // Test with PaymentMethodsMetadataGiropay object
        $expected = new \Monei\Model\PaymentMethodsMetadataGiropay();
        $expected->setCountries('test_value');

        $model->setGiropay($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataGiropay::class, $model->getGiropay());
        $this->assertEquals('test_value', $model->getGiropay()->getCountries());
    }

    /**
     * Test attribute "ideal"
     */
    public function testPropertyIDeal()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getIDeal());

        // Test with PaymentMethodsMetadataIDeal object
        $expected = new \Monei\Model\PaymentMethodsMetadataIDeal();
        $expected->setCountries('test_value');

        $model->setIDeal($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataIDeal::class, $model->getIDeal());
        $this->assertEquals('test_value', $model->getIDeal()->getCountries());
    }

    /**
     * Test attribute "klarna"
     */
    public function testPropertyKlarna()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getKlarna());

        // Test with PaymentMethodsMetadataKlarna object
        $expected = new \Monei\Model\PaymentMethodsMetadataKlarna();
        $expected->setCountries('test_value');

        $model->setKlarna($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataKlarna::class, $model->getKlarna());
        $this->assertEquals('test_value', $model->getKlarna()->getCountries());
    }

    /**
     * Test attribute "mbway"
     */
    public function testPropertyMbway()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getMbway());

        // Test with PaymentMethodsMetadataMbway object
        $expected = new \Monei\Model\PaymentMethodsMetadataMbway();
        $expected->setCountries('test_value');

        $model->setMbway($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataMbway::class, $model->getMbway());
        $this->assertEquals('test_value', $model->getMbway()->getCountries());
    }

    /**
     * Test attribute "multibanco"
     */
    public function testPropertyMultibanco()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getMultibanco());
    }

    /**
     * Test attribute "sepa"
     */
    public function testPropertySepa()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getSepa());

        // Test with PaymentMethodsMetadataSepa object
        $expected = new \Monei\Model\PaymentMethodsMetadataSepa();
        $expected->setCountries('test_value');

        $model->setSepa($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataSepa::class, $model->getSepa());
        $this->assertEquals('test_value', $model->getSepa()->getCountries());
    }

    /**
     * Test attribute "sofort"
     */
    public function testPropertySofort()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getSofort());

        // Test with PaymentMethodsMetadataSofort object
        $expected = new \Monei\Model\PaymentMethodsMetadataSofort();
        $expected->setCountries('test_value');

        $model->setSofort($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataSofort::class, $model->getSofort());
        $this->assertEquals('test_value', $model->getSofort()->getCountries());
    }

    /**
     * Test attribute "trustly"
     */
    public function testPropertyTrustly()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getTrustly());

        // Test with PaymentMethodsMetadataTrustly object
        $expected = new \Monei\Model\PaymentMethodsMetadataTrustly();
        $expected->setCountries('test_value');

        $model->setTrustly($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataTrustly::class, $model->getTrustly());
        $this->assertEquals('test_value', $model->getTrustly()->getCountries());
    }

    /**
     * Test attribute "google_pay"
     */
    public function testPropertyGooglePay()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getGooglePay());

        // Test with PaymentMethodsMetadataGooglePay object
        $expected = new \Monei\Model\PaymentMethodsMetadataGooglePay();
        $expected->setMerchantId('test-merchant-id');
        $expected->setCvcRequired(true);

        $model->setGooglePay($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataGooglePay::class, $model->getGooglePay());
        $this->assertEquals('test-merchant-id', $model->getGooglePay()->getMerchantId());
        $this->assertEquals(true, $model->getGooglePay()->getCvcRequired());
    }

    /**
     * Test attribute "apple_pay"
     */
    public function testPropertyApplePay()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getApplePay());

        // Test with PaymentMethodsMetadataApplePay object
        $expected = new \Monei\Model\PaymentMethodsMetadataApplePay();
        $expected->setMerchantId('test-merchant-id');

        $model->setApplePay($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataApplePay::class, $model->getApplePay());
        $this->assertEquals('test-merchant-id', $model->getApplePay()->getMerchantId());
    }

    /**
     * Test attribute "click_to_pay"
     */
    public function testPropertyClickToPay()
    {
        $model = new \Monei\Model\PaymentMethodsMetadata();

        // Test with null value
        $this->assertNull($model->getClickToPay());

        // Test with PaymentMethodsMetadataClickToPay object
        $expected = new \Monei\Model\PaymentMethodsMetadataClickToPay();

        $model->setClickToPay($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentMethodsMetadataClickToPay::class, $model->getClickToPay());
    }
}