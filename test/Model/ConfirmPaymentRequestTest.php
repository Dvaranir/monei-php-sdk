<?php

/**
 * ConfirmPaymentRequestTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ConfirmPaymentRequestTest Class Doc Comment
 *
 * @category    Class
 * @description ConfirmPaymentRequest
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ConfirmPaymentRequestTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ConfirmPaymentRequest"
     */
    public function testConfirmPaymentRequest()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();
        $this->assertInstanceOf(\Monei\Model\ConfirmPaymentRequest::class, $model);

        // Test with constructor parameters
        $data = [
            'payment_token' => 'test_value',
            'payment_method' => new \Monei\Model\ConfirmPaymentRequestPaymentMethod(),
            'generate_payment_token' => true,
            'customer' => new \Monei\Model\PaymentCustomer(),
            'billing_details' => new \Monei\Model\PaymentBillingDetails(),
            'shipping_details' => new \Monei\Model\PaymentShippingDetails(),
            'metadata' => (object) ['test_key' => 'test_value'],
        ];

        $model = new \Monei\Model\ConfirmPaymentRequest($data);
        $this->assertEquals($data['payment_token'], $model->getPaymentToken());
        $this->assertEquals($data['payment_method'], $model->getPaymentMethod());
        $this->assertEquals($data['generate_payment_token'], $model->getGeneratePaymentToken());
        $this->assertEquals($data['customer'], $model->getCustomer());
        $this->assertEquals($data['billing_details'], $model->getBillingDetails());
        $this->assertEquals($data['shipping_details'], $model->getShippingDetails());
        $this->assertEquals($data['metadata'], $model->getMetadata());
    }

    /**
     * Test attribute "payment_token"
     */
    public function testPropertyPaymentToken()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();
        $expected = 'test_value';
        $model->setPaymentToken($expected);
        $this->assertEquals($expected, $model->getPaymentToken());
    }

    /**
     * Test attribute "payment_method"
     */
    public function testPropertyPaymentMethod()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();

        // Test with null value
        $this->assertNull($model->getPaymentMethod());

        // Test with ConfirmPaymentRequestPaymentMethod object
        $expected = new \Monei\Model\ConfirmPaymentRequestPaymentMethod();

        $card = new \Monei\Model\ConfirmPaymentRequestPaymentMethodCard();
        $card->setCardholderName('Test User');
        $expected->setCard($card);

        $model->setPaymentMethod($expected);
        $this->assertInstanceOf(\Monei\Model\ConfirmPaymentRequestPaymentMethod::class, $model->getPaymentMethod());
        $this->assertEquals('Test User', $model->getPaymentMethod()->getCard()->getCardholderName());
    }

    /**
     * Test attribute "generate_payment_token"
     */
    public function testPropertyGeneratePaymentToken()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();
        $expected = true;
        $model->setGeneratePaymentToken($expected);
        $this->assertEquals($expected, $model->getGeneratePaymentToken());
    }

    /**
     * Test attribute "customer"
     */
    public function testPropertyCustomer()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();

        // Test with null value
        $this->assertNull($model->getCustomer());

        // Test with PaymentCustomer object
        $expected = new \Monei\Model\PaymentCustomer();
        $expected->setName('Test Name');

        $model->setCustomer($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentCustomer::class, $model->getCustomer());
        $this->assertEquals('Test Name', $model->getCustomer()->getName());
    }

    /**
     * Test attribute "billing_details"
     */
    public function testPropertyBillingDetails()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();

        // Test with null value
        $this->assertNull($model->getBillingDetails());

        // Test with PaymentBillingDetails object
        $expected = new \Monei\Model\PaymentBillingDetails();

        $model->setBillingDetails($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentBillingDetails::class, $model->getBillingDetails());
    }

    /**
     * Test attribute "shipping_details"
     */
    public function testPropertyShippingDetails()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();

        // Test with null value
        $this->assertNull($model->getShippingDetails());

        // Test with PaymentShippingDetails object
        $expected = new \Monei\Model\PaymentShippingDetails();

        $model->setShippingDetails($expected);
        $this->assertInstanceOf(\Monei\Model\PaymentShippingDetails::class, $model->getShippingDetails());
    }

    /**
     * Test attribute "metadata"
     */
    public function testPropertyMetadata()
    {
        $model = new \Monei\Model\ConfirmPaymentRequest();
        $expected = (object) ['test_key' => 'test_value'];
        $model->setMetadata($expected);
        $this->assertEquals($expected, $model->getMetadata());
    }
}
