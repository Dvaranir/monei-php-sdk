<?php

/**
 * NotFoundErrorTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;
use Monei\Model\NotFoundError;

/**
 * NotFoundErrorTest Class Doc Comment
 *
 * @category    Class
 * @description NotFoundError
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class NotFoundErrorTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "NotFoundError"
     */
    public function testNotFoundError()
    {
        $error = new NotFoundError();
        $this->assertInstanceOf(NotFoundError::class, $error);
        
        // Test with constructor parameters
        $data = [
            'status' => 'error',
            'status_code' => 404,
            'message' => 'Resource not found',
            'request_id' => 'req_123456789',
            'request_time' => new \DateTime('2023-01-15T12:34:56Z')
        ];
        
        $error = new NotFoundError($data);
        $this->assertEquals($data['status'], $error->getStatus());
        $this->assertEquals($data['status_code'], $error->getStatusCode());
        $this->assertEquals($data['message'], $error->getMessage());
        $this->assertEquals($data['request_id'], $error->getRequestId());
        $this->assertEquals($data['request_time'], $error->getRequestTime());
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        $error = new NotFoundError();
        $expected = 'error';
        $error->setStatus($expected);
        $this->assertEquals($expected, $error->getStatus());
    }

    /**
     * Test attribute "status_code"
     */
    public function testPropertyStatusCode()
    {
        $error = new NotFoundError();
        $expected = 404;
        $error->setStatusCode($expected);
        $this->assertEquals($expected, $error->getStatusCode());
    }

    /**
     * Test attribute "message"
     */
    public function testPropertyMessage()
    {
        $error = new NotFoundError();
        $expected = 'The requested resource was not found';
        $error->setMessage($expected);
        $this->assertEquals($expected, $error->getMessage());
    }

    /**
     * Test attribute "request_id"
     */
    public function testPropertyRequestId()
    {
        $error = new NotFoundError();
        $expected = 'req_987654321';
        $error->setRequestId($expected);
        $this->assertEquals($expected, $error->getRequestId());
    }

    /**
     * Test attribute "request_time"
     */
    public function testPropertyRequestTime()
    {
        $error = new NotFoundError();
        $expected = new \DateTime('2023-02-20T15:45:30Z');
        $error->setRequestTime($expected);
        $this->assertEquals($expected, $error->getRequestTime());
    }
}
