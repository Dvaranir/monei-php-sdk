<?php

/**
 * CreatePaymentRequestTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;
use Monei\Model\CreatePaymentRequest;
use Monei\Model\PaymentCustomer;
use Monei\Model\PaymentBillingDetails;
use Monei\Model\PaymentShippingDetails;
use Monei\Model\Address;
use Monei\Model\PaymentSequence;
use Monei\Model\PaymentPaymentMethodInput;
use Monei\Model\PaymentTransactionType;
use Monei\Model\PaymentSessionDetails;

/**
 * CreatePaymentRequestTest Class Doc Comment
 *
 * @category    Class
 * @description CreatePaymentRequest
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CreatePaymentRequestTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test "CreatePaymentRequest"
     */
    public function testCreatePaymentRequest()
    {
        $paymentRequest = new CreatePaymentRequest();
        $this->assertInstanceOf(CreatePaymentRequest::class, $paymentRequest);

        // Test basic constructor parameters
        $data = [
            'amount' => 1000,
            'currency' => 'EUR',
            'order_id' => 'order-123',
            'description' => 'Test payment'
        ];

        $paymentRequest = new CreatePaymentRequest($data);
        $this->assertEquals($data['amount'], $paymentRequest->getAmount());
        $this->assertEquals($data['currency'], $paymentRequest->getCurrency());
        $this->assertEquals($data['order_id'], $paymentRequest->getOrderId());
        $this->assertEquals($data['description'], $paymentRequest->getDescription());
    }

    /**
     * Test attribute "amount"
     */
    public function testPropertyAmount()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 1500;
        $paymentRequest->setAmount($expected);
        $this->assertEquals($expected, $paymentRequest->getAmount());
    }

    /**
     * Test attribute "currency"
     */
    public function testPropertyCurrency()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'USD';
        $paymentRequest->setCurrency($expected);
        $this->assertEquals($expected, $paymentRequest->getCurrency());
    }

    /**
     * Test attribute "order_id"
     */
    public function testPropertyOrderId()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'order-456';
        $paymentRequest->setOrderId($expected);
        $this->assertEquals($expected, $paymentRequest->getOrderId());
    }

    /**
     * Test attribute "callback_url"
     */
    public function testPropertyCallbackUrl()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'https://example.com/callback';
        $paymentRequest->setCallbackUrl($expected);
        $this->assertEquals($expected, $paymentRequest->getCallbackUrl());
    }

    /**
     * Test attribute "complete_url"
     */
    public function testPropertyCompleteUrl()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'https://example.com/complete';
        $paymentRequest->setCompleteUrl($expected);
        $this->assertEquals($expected, $paymentRequest->getCompleteUrl());
    }

    /**
     * Test attribute "fail_url"
     */
    public function testPropertyFailUrl()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'https://example.com/fail';
        $paymentRequest->setFailUrl($expected);
        $this->assertEquals($expected, $paymentRequest->getFailUrl());
    }

    /**
     * Test attribute "cancel_url"
     */
    public function testPropertyCancelUrl()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'https://example.com/cancel';
        $paymentRequest->setCancelUrl($expected);
        $this->assertEquals($expected, $paymentRequest->getCancelUrl());
    }

    /**
     * Test attribute "payment_token"
     */
    public function testPropertyPaymentToken()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'pm_123456789';
        $paymentRequest->setPaymentToken($expected);
        $this->assertEquals($expected, $paymentRequest->getPaymentToken());
    }

    /**
     * Test attribute "session_id"
     */
    public function testPropertySessionId()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'sess_123456789';
        $paymentRequest->setSessionId($expected);
        $this->assertEquals($expected, $paymentRequest->getSessionId());
    }

    /**
     * Test attribute "generate_payment_token"
     */
    public function testPropertyGeneratePaymentToken()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = true;
        $paymentRequest->setGeneratePaymentToken($expected);
        $this->assertEquals($expected, $paymentRequest->getGeneratePaymentToken());

        $expected = false;
        $paymentRequest->setGeneratePaymentToken($expected);
        $this->assertEquals($expected, $paymentRequest->getGeneratePaymentToken());
    }

    /**
     * Test attribute "payment_method"
     */
    public function testPropertyPaymentMethod()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getPaymentMethod());

        // Test with PaymentPaymentMethodInput object
        $paymentMethod = new PaymentPaymentMethodInput();
        $cardInput = new \Monei\Model\PaymentPaymentMethodCardInput();
        $cardInput->setNumber('4242424242424242');
        $cardInput->setExpMonth(12);
        $cardInput->setExpYear(2030);
        $cardInput->setCvc('123');

        $paymentMethod->setCard($cardInput);

        $paymentRequest->setPaymentMethod($paymentMethod);
        $retrievedPaymentMethod = $paymentRequest->getPaymentMethod();

        $this->assertInstanceOf(PaymentPaymentMethodInput::class, $retrievedPaymentMethod);
        $this->assertInstanceOf(\Monei\Model\PaymentPaymentMethodCardInput::class, $retrievedPaymentMethod->getCard());
        $this->assertEquals('4242424242424242', $retrievedPaymentMethod->getCard()->getNumber());
    }

    /**
     * Test attribute "allowed_payment_methods"
     */
    public function testPropertyAllowedPaymentMethods()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getAllowedPaymentMethods());

        // Since this is a complex type, a basic test just to ensure getter/setter work
        $allowedPaymentMethods = [];
        $paymentRequest->setAllowedPaymentMethods($allowedPaymentMethods);
        $this->assertSame($allowedPaymentMethods, $paymentRequest->getAllowedPaymentMethods());
    }

    /**
     * Test attribute "transaction_type"
     */
    public function testPropertyTransactionType()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'SALE';
        $paymentRequest->setTransactionType($expected);
        $this->assertEquals($expected, $paymentRequest->getTransactionType());
    }

    /**
     * Test attribute "sequence"
     */
    public function testPropertySequence()
    {
        $paymentRequest = new CreatePaymentRequest();
        
        // Test with null value
        $this->assertNull($paymentRequest->getSequence());
        
        // Test with PaymentSequence object
        $sequence = new PaymentSequence();
        $sequence->setType('recurring');
        
        $paymentRequest->setSequence($sequence);
        $retrievedSequence = $paymentRequest->getSequence();
        
        $this->assertInstanceOf(PaymentSequence::class, $retrievedSequence);
        $this->assertEquals('recurring', $retrievedSequence->getType());
    }

    /**
     * Test attribute "store_id"
     */
    public function testPropertyStoreId()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'store_123';
        $paymentRequest->setStoreId($expected);
        $this->assertEquals($expected, $paymentRequest->getStoreId());
    }

    /**
     * Test attribute "point_of_sale_id"
     */
    public function testPropertyPointOfSaleId()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'pos_123';
        $paymentRequest->setPointOfSaleId($expected);
        $this->assertEquals($expected, $paymentRequest->getPointOfSaleId());
    }

    /**
     * Test attribute "subscription_id"
     */
    public function testPropertySubscriptionId()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'sub_123456';
        $paymentRequest->setSubscriptionId($expected);
        $this->assertEquals($expected, $paymentRequest->getSubscriptionId());
    }

    /**
     * Test attribute "auto_recover"
     */
    public function testPropertyAutoRecover()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = true;
        $paymentRequest->setAutoRecover($expected);
        $this->assertEquals($expected, $paymentRequest->getAutoRecover());

        $expected = false;
        $paymentRequest->setAutoRecover($expected);
        $this->assertEquals($expected, $paymentRequest->getAutoRecover());
    }

    /**
     * Test attribute "description"
     */
    public function testPropertyDescription()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = 'Test payment for order #123';
        $paymentRequest->setDescription($expected);
        $this->assertEquals($expected, $paymentRequest->getDescription());
    }

    /**
     * Test attribute "customer"
     */
    public function testPropertyCustomer()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getCustomer());

        // Test with Customer object
        $customer = new PaymentCustomer();
        $customer->setEmail('customer@example.com');
        $customer->setName('John Doe');
        $customer->setPhone('+1234567890');

        $paymentRequest->setCustomer($customer);
        $retrievedCustomer = $paymentRequest->getCustomer();

        $this->assertInstanceOf(PaymentCustomer::class, $retrievedCustomer);
        $this->assertEquals('customer@example.com', $retrievedCustomer->getEmail());
        $this->assertEquals('John Doe', $retrievedCustomer->getName());
        $this->assertEquals('+1234567890', $retrievedCustomer->getPhone());
    }

    /**
     * Test attribute "billing_details"
     */
    public function testPropertyBillingDetails()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getBillingDetails());

        // Test with BillingDetails object
        $address = new Address();
        $address->setCountry('ES');
        $address->setCity('Barcelona');

        $billingDetails = new PaymentBillingDetails();
        $billingDetails->setName('Jane Smith');
        $billingDetails->setEmail('jane@example.com');
        $billingDetails->setAddress($address);

        $paymentRequest->setBillingDetails($billingDetails);
        $retrievedBillingDetails = $paymentRequest->getBillingDetails();

        $this->assertInstanceOf(PaymentBillingDetails::class, $retrievedBillingDetails);
        $this->assertEquals('Jane Smith', $retrievedBillingDetails->getName());
        $this->assertEquals('jane@example.com', $retrievedBillingDetails->getEmail());
        $this->assertInstanceOf(Address::class, $retrievedBillingDetails->getAddress());
        $this->assertEquals('ES', $retrievedBillingDetails->getAddress()->getCountry());
    }

    /**
     * Test attribute "shipping_details"
     */
    public function testPropertyShippingDetails()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getShippingDetails());

        // Test with ShippingDetails object
        $address = new Address();
        $address->setCountry('US');
        $address->setCity('New York');

        $shippingDetails = new PaymentShippingDetails();
        $shippingDetails->setName('John Smith');
        $shippingDetails->setAddress($address);

        $paymentRequest->setShippingDetails($shippingDetails);
        $retrievedShippingDetails = $paymentRequest->getShippingDetails();

        $this->assertInstanceOf(PaymentShippingDetails::class, $retrievedShippingDetails);
        $this->assertEquals('John Smith', $retrievedShippingDetails->getName());
        $this->assertInstanceOf(Address::class, $retrievedShippingDetails->getAddress());
        $this->assertEquals('US', $retrievedShippingDetails->getAddress()->getCountry());
    }

    /**
     * Test attribute "session_details"
     */
    public function testPropertySessionDetails()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getSessionDetails());

        // Test with SessionDetails object - a simple test since this is a complex object
        $sessionDetails = new PaymentSessionDetails();
        $paymentRequest->setSessionDetails($sessionDetails);

        $this->assertInstanceOf(PaymentSessionDetails::class, $paymentRequest->getSessionDetails());
    }

    /**
     * Test attribute "expire_at"
     */
    public function testPropertyExpireAt()
    {
        $paymentRequest = new CreatePaymentRequest();
        $expected = time() + 3600; // Current time + 1 hour
        $paymentRequest->setExpireAt($expected);
        $this->assertEquals($expected, $paymentRequest->getExpireAt());
    }

    /**
     * Test attribute "metadata"
     */
    public function testPropertyMetadata()
    {
        $paymentRequest = new CreatePaymentRequest();

        // Test with null value
        $this->assertNull($paymentRequest->getMetadata());

        // Test with metadata object
        $expected = (object) [
            'ref_id' => '12345',
            'custom_field' => 'test_value'
        ];

        $paymentRequest->setMetadata($expected);
        $this->assertEquals($expected, $paymentRequest->getMetadata());
    }
}
