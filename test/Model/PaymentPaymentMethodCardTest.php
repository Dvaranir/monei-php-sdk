<?php

/**
 * PaymentPaymentMethodCardTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.8
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Monei\Test\Model;

use PHPUnit\Framework\TestCase;
use Monei\Model\PaymentPaymentMethodCard;

/**
 * PaymentPaymentMethodCardTest Class Doc Comment
 *
 * @category    Class
 * @description Details about the card used as payment method at the time of the transaction.
 * @package     Monei
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PaymentPaymentMethodCardTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test "PaymentPaymentMethodCard"
     */
    public function testPaymentPaymentMethodCard()
    {
        $card = new PaymentPaymentMethodCard();
        $this->assertInstanceOf(PaymentPaymentMethodCard::class, $card);

        // Test with constructor parameters
        $data = [
            'country' => 'US',
            'brand' => 'visa',
            'type' => 'credit',
            'three_d_secure' => true,
            'three_d_secure_version' => '2.0',
            'three_d_secure_flow' => 'challenge',
            'expiration' => 1735689600, // Example timestamp for a future date
            'last4' => '4242',
            'tokenization_method' => 'apple_pay',
            'cardholder_name' => 'John Doe',
            'cardholder_email' => 'john@example.com'
        ];

        $card = new PaymentPaymentMethodCard($data);
        $this->assertEquals($data['country'], $card->getCountry());
        $this->assertEquals($data['brand'], $card->getBrand());
        $this->assertEquals($data['type'], $card->getType());
        $this->assertEquals($data['three_d_secure'], $card->getThreeDSecure());
        $this->assertEquals($data['three_d_secure_version'], $card->getThreeDSecureVersion());
        $this->assertEquals($data['three_d_secure_flow'], $card->getThreeDSecureFlow());
        $this->assertEquals($data['expiration'], $card->getExpiration());
        $this->assertEquals($data['last4'], $card->getLast4());
        $this->assertEquals($data['tokenization_method'], $card->getTokenizationMethod());
        $this->assertEquals($data['cardholder_name'], $card->getCardholderName());
        $this->assertEquals($data['cardholder_email'], $card->getCardholderEmail());
    }

    /**
     * Test attribute "country"
     */
    public function testPropertyCountry()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'ES';
        $card->setCountry($expected);
        $this->assertEquals($expected, $card->getCountry());
    }

    /**
     * Test attribute "brand"
     */
    public function testPropertyBrand()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'mastercard';
        $card->setBrand($expected);
        $this->assertEquals($expected, $card->getBrand());

        // Test with invalid brand
        $this->expectException(\InvalidArgumentException::class);
        $card->setBrand('invalid_brand');
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'debit';
        $card->setType($expected);
        $this->assertEquals($expected, $card->getType());

        // Test with invalid type
        $this->expectException(\InvalidArgumentException::class);
        $card->setType('invalid_type');
    }

    /**
     * Test attribute "three_d_secure"
     */
    public function testPropertyThreeDSecure()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = true;
        $card->setThreeDSecure($expected);
        $this->assertEquals($expected, $card->getThreeDSecure());

        $expected = false;
        $card->setThreeDSecure($expected);
        $this->assertEquals($expected, $card->getThreeDSecure());
    }

    /**
     * Test attribute "three_d_secure_version"
     */
    public function testPropertyThreeDSecureVersion()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = '2.1';
        $card->setThreeDSecureVersion($expected);
        $this->assertEquals($expected, $card->getThreeDSecureVersion());
    }

    /**
     * Test attribute "three_d_secure_flow"
     */
    public function testPropertyThreeDSecureFlow()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'FRICTIONLESS';
        $card->setThreeDSecureFlow($expected);
        $this->assertEquals($expected, $card->getThreeDSecureFlow());

        // Test with invalid flow
        $this->expectException(\InvalidArgumentException::class);
        $card->setThreeDSecureFlow('invalid_flow');
    }

    /**
     * Test attribute "expiration"
     */
    public function testPropertyExpiration()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 1735689600; // Example timestamp for a future date
        $card->setExpiration($expected);
        $this->assertEquals($expected, $card->getExpiration());
    }

    /**
     * Test attribute "last4"
     */
    public function testPropertyLast4()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = '1234';
        $card->setLast4($expected);
        $this->assertEquals($expected, $card->getLast4());
    }

    /**
     * Test attribute "tokenization_method"
     */
    public function testPropertyTokenizationMethod()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'googlePay';
        $card->setTokenizationMethod($expected);
        $this->assertEquals($expected, $card->getTokenizationMethod());

        // Test with invalid tokenization method
        $this->expectException(\InvalidArgumentException::class);
        $card->setTokenizationMethod('invalid_method');
    }

    /**
     * Test attribute "cardholder_name"
     */
    public function testPropertyCardholderName()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'Jane Smith';
        $card->setCardholderName($expected);
        $this->assertEquals($expected, $card->getCardholderName());
    }

    /**
     * Test attribute "cardholder_email"
     */
    public function testPropertyCardholderEmail()
    {
        $card = new PaymentPaymentMethodCard();
        $expected = 'jane@example.com';
        $card->setCardholderEmail($expected);
        $this->assertEquals($expected, $card->getCardholderEmail());
    }
}
